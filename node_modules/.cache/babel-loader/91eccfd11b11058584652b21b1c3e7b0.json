{"remainingRequest":"D:\\MyProjects\\HbuilderX-projects\\2.19z\\node_modules\\babel-loader\\lib\\index.js!D:\\MyProjects\\HbuilderX-projects\\2.19z\\src\\js\\InlineLexer.js","dependencies":[{"path":"D:\\MyProjects\\HbuilderX-projects\\2.19z\\src\\js\\InlineLexer.js","mtime":1584139706000},{"path":"D:\\MyProjects\\HbuilderX-projects\\2.19z\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1582103017138},{"path":"D:\\MyProjects\\HbuilderX-projects\\2.19z\\node_modules\\babel-loader\\lib\\index.js","mtime":1582103090028}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.string.link\";\nimport _classCallCheck from \"D:\\\\MyProjects\\\\HbuilderX-projects\\\\2.19z\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\MyProjects\\\\HbuilderX-projects\\\\2.19z\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/createClass\";\n\nvar Renderer = require(\"./Renderer.js\");\n\nvar _require = require(\"./defaults.js\"),\n    defaults = _require.defaults;\n\nvar _require2 = require(\"./rules.js\"),\n    inline = _require2.inline;\n\nvar _require3 = require(\"./helpers.js\"),\n    findClosingBracket = _require3.findClosingBracket,\n    escape = _require3.escape;\n/**\n * Inline Lexer & Compiler\n */\n\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  function InlineLexer(links, options) {\n    _classCallCheck(this, InlineLexer);\n\n    this.options = options || defaults;\n    this.links = links;\n    this.rules = inline.normal;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n\n    if (!this.links) {\n      throw new Error('Tokens array requires a `links` property.');\n    }\n\n    if (this.options.pedantic) {\n      this.rules = inline.pedantic;\n    } else if (this.options.gfm) {\n      if (this.options.breaks) {\n        this.rules = inline.breaks;\n      } else {\n        this.rules = inline.gfm;\n      }\n    }\n  }\n  /**\n   * Expose Inline Rules\n   */\n\n\n  _createClass(InlineLexer, [{\n    key: \"output\",\n\n    /**\n     * Lexing/Compiling\n     */\n    value: function output(src) {\n      var out = '',\n          link,\n          text,\n          href,\n          title,\n          cap,\n          prevCapZero;\n\n      while (src) {\n        // escape\n        if (cap = this.rules.escape.exec(src)) {\n          src = src.substring(cap[0].length);\n          out += escape(cap[1]);\n          continue;\n        } // tag\n\n\n        if (cap = this.rules.tag.exec(src)) {\n          if (!this.inLink && /^<a /i.test(cap[0])) {\n            this.inLink = true;\n          } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {\n            this.inLink = false;\n          }\n\n          if (!this.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n            this.inRawBlock = true;\n          } else if (this.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n            this.inRawBlock = false;\n          }\n\n          src = src.substring(cap[0].length);\n          out += this.renderer.html(this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0]);\n          continue;\n        } // link\n\n\n        if (cap = this.rules.link.exec(src)) {\n          var lastParenIndex = findClosingBracket(cap[2], '()');\n\n          if (lastParenIndex > -1) {\n            var start = cap[0].indexOf('!') === 0 ? 5 : 4;\n            var linkLen = start + cap[1].length + lastParenIndex;\n            cap[2] = cap[2].substring(0, lastParenIndex);\n            cap[0] = cap[0].substring(0, linkLen).trim();\n            cap[3] = '';\n          }\n\n          src = src.substring(cap[0].length);\n          this.inLink = true;\n          href = cap[2];\n\n          if (this.options.pedantic) {\n            link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n            if (link) {\n              href = link[1];\n              title = link[3];\n            } else {\n              title = '';\n            }\n          } else {\n            title = cap[3] ? cap[3].slice(1, -1) : '';\n          }\n\n          href = href.trim().replace(/^<([\\s\\S]*)>$/, '$1');\n          out += this.outputLink(cap, {\n            href: InlineLexer.escapes(href),\n            title: InlineLexer.escapes(title)\n          });\n          this.inLink = false;\n          continue;\n        } // reflink, nolink\n\n\n        if ((cap = this.rules.reflink.exec(src)) || (cap = this.rules.nolink.exec(src))) {\n          src = src.substring(cap[0].length);\n          link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n          link = this.links[link.toLowerCase()];\n\n          if (!link || !link.href) {\n            out += cap[0].charAt(0);\n            src = cap[0].substring(1) + src;\n            continue;\n          }\n\n          this.inLink = true;\n          out += this.outputLink(cap, link);\n          this.inLink = false;\n          continue;\n        } // strong\n\n\n        if (cap = this.rules.strong.exec(src)) {\n          src = src.substring(cap[0].length);\n          out += this.renderer.strong(this.output(cap[4] || cap[3] || cap[2] || cap[1]));\n          continue;\n        } // em\n\n\n        if (cap = this.rules.em.exec(src)) {\n          src = src.substring(cap[0].length);\n          out += this.renderer.em(this.output(cap[6] || cap[5] || cap[4] || cap[3] || cap[2] || cap[1]));\n          continue;\n        } // code\n\n\n        if (cap = this.rules.code.exec(src)) {\n          src = src.substring(cap[0].length);\n          out += this.renderer.codespan(escape(cap[2].trim(), true));\n          continue;\n        } // br\n\n\n        if (cap = this.rules.br.exec(src)) {\n          src = src.substring(cap[0].length);\n          out += this.renderer.br();\n          continue;\n        } // del (gfm)\n\n\n        if (cap = this.rules.del.exec(src)) {\n          src = src.substring(cap[0].length);\n          out += this.renderer.del(this.output(cap[1]));\n          continue;\n        } // autolink\n\n\n        if (cap = this.rules.autolink.exec(src)) {\n          src = src.substring(cap[0].length);\n\n          if (cap[2] === '@') {\n            text = escape(this.mangle(cap[1]));\n            href = 'mailto:' + text;\n          } else {\n            text = escape(cap[1]);\n            href = text;\n          }\n\n          out += this.renderer.link(href, null, text);\n          continue;\n        } // url (gfm)\n\n\n        if (!this.inLink && (cap = this.rules.url.exec(src))) {\n          if (cap[2] === '@') {\n            text = escape(cap[0]);\n            href = 'mailto:' + text;\n          } else {\n            // do extended autolink path validation\n            do {\n              prevCapZero = cap[0];\n              cap[0] = this.rules._backpedal.exec(cap[0])[0];\n            } while (prevCapZero !== cap[0]);\n\n            text = escape(cap[0]);\n\n            if (cap[1] === 'www.') {\n              href = 'http://' + text;\n            } else {\n              href = text;\n            }\n          }\n\n          src = src.substring(cap[0].length);\n          out += this.renderer.link(href, null, text);\n          continue;\n        } // text\n\n\n        if (cap = this.rules.text.exec(src)) {\n          src = src.substring(cap[0].length);\n\n          if (this.inRawBlock) {\n            out += this.renderer.text(this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0]);\n          } else {\n            out += this.renderer.text(escape(this.smartypants(cap[0])));\n          }\n\n          continue;\n        }\n\n        if (src) {\n          throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n        }\n      }\n\n      return out;\n    }\n  }, {\n    key: \"outputLink\",\n\n    /**\n     * Compile Link\n     */\n    value: function outputLink(cap, link) {\n      var href = link.href,\n          title = link.title ? escape(link.title) : null;\n      return cap[0].charAt(0) !== '!' ? this.renderer.link(href, title, this.output(cap[1])) : this.renderer.image(href, title, escape(cap[1]));\n    }\n    /**\n     * Smartypants Transformations\n     */\n\n  }, {\n    key: \"smartypants\",\n    value: function smartypants(text) {\n      if (!this.options.smartypants) return text;\n      return text // em-dashes\n      .replace(/---/g, \"\\u2014\") // en-dashes\n      .replace(/--/g, \"\\u2013\") // opening singles\n      .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, \"$1\\u2018\") // closing singles & apostrophes\n      .replace(/'/g, \"\\u2019\") // opening doubles\n      .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, \"$1\\u201C\") // closing doubles\n      .replace(/\"/g, \"\\u201D\") // ellipses\n      .replace(/\\.{3}/g, \"\\u2026\");\n    }\n    /**\n     * Mangle Links\n     */\n\n  }, {\n    key: \"mangle\",\n    value: function mangle(text) {\n      if (!this.options.mangle) return text;\n      var l = text.length;\n      var out = '',\n          i = 0,\n          ch;\n\n      for (; i < l; i++) {\n        ch = text.charCodeAt(i);\n\n        if (Math.random() > 0.5) {\n          ch = 'x' + ch.toString(16);\n        }\n\n        out += '&#' + ch + ';';\n      }\n\n      return out;\n    }\n  }], [{\n    key: \"output\",\n\n    /**\n     * Static Lexing/Compiling Method\n     */\n    value: function output(src, links, options) {\n      var inline = new InlineLexer(links, options);\n      return inline.output(src);\n    }\n  }, {\n    key: \"escapes\",\n    value: function escapes(text) {\n      return text ? text.replace(InlineLexer.rules._escapes, '$1') : text;\n    }\n  }, {\n    key: \"rules\",\n    get: function get() {\n      return inline;\n    }\n  }]);\n\n  return InlineLexer;\n}();",{"version":3,"sources":["D:\\MyProjects\\HbuilderX-projects\\2.19z\\src\\js\\InlineLexer.js"],"names":["Renderer","require","defaults","inline","findClosingBracket","escape","module","exports","links","options","rules","normal","renderer","Error","pedantic","gfm","breaks","src","out","link","text","href","title","cap","prevCapZero","exec","substring","length","tag","inLink","test","inRawBlock","html","sanitize","sanitizer","lastParenIndex","start","indexOf","linkLen","trim","slice","replace","outputLink","InlineLexer","escapes","reflink","nolink","toLowerCase","charAt","strong","output","em","code","codespan","br","del","autolink","mangle","url","_backpedal","smartypants","charCodeAt","image","l","i","ch","Math","random","toString","_escapes"],"mappings":"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","sourcesContent":["const Renderer = require('./Renderer.js');\nconst { defaults } = require('./defaults.js');\nconst { inline } = require('./rules.js');\nconst {\n  findClosingBracket,\n  escape\n} = require('./helpers.js');\n\n/**\n * Inline Lexer & Compiler\n */\nmodule.exports = class InlineLexer {\n  constructor(links, options) {\n    this.options = options || defaults;\n    this.links = links;\n    this.rules = inline.normal;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n\n    if (!this.links) {\n      throw new Error('Tokens array requires a `links` property.');\n    }\n\n    if (this.options.pedantic) {\n      this.rules = inline.pedantic;\n    } else if (this.options.gfm) {\n      if (this.options.breaks) {\n        this.rules = inline.breaks;\n      } else {\n        this.rules = inline.gfm;\n      }\n    }\n  }\n\n  /**\n   * Expose Inline Rules\n   */\n  static get rules() {\n    return inline;\n  }\n\n  /**\n   * Static Lexing/Compiling Method\n   */\n  static output(src, links, options) {\n    const inline = new InlineLexer(links, options);\n    return inline.output(src);\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  output(src) {\n    let out = '',\n      link,\n      text,\n      href,\n      title,\n      cap,\n      prevCapZero;\n\n    while (src) {\n      // escape\n      if (cap = this.rules.escape.exec(src)) {\n        src = src.substring(cap[0].length);\n        out += escape(cap[1]);\n        continue;\n      }\n\n      // tag\n      if (cap = this.rules.tag.exec(src)) {\n        if (!this.inLink && /^<a /i.test(cap[0])) {\n          this.inLink = true;\n        } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {\n          this.inLink = false;\n        }\n        if (!this.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n          this.inRawBlock = true;\n        } else if (this.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n          this.inRawBlock = false;\n        }\n\n        src = src.substring(cap[0].length);\n        out += this.renderer.html(this.options.sanitize\n          ? (this.options.sanitizer\n            ? this.options.sanitizer(cap[0])\n            : escape(cap[0]))\n          : cap[0]);\n        continue;\n      }\n\n      // link\n      if (cap = this.rules.link.exec(src)) {\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n        src = src.substring(cap[0].length);\n        this.inLink = true;\n        href = cap[2];\n        if (this.options.pedantic) {\n          link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n          if (link) {\n            href = link[1];\n            title = link[3];\n          } else {\n            title = '';\n          }\n        } else {\n          title = cap[3] ? cap[3].slice(1, -1) : '';\n        }\n        href = href.trim().replace(/^<([\\s\\S]*)>$/, '$1');\n        out += this.outputLink(cap, {\n          href: InlineLexer.escapes(href),\n          title: InlineLexer.escapes(title)\n        });\n        this.inLink = false;\n        continue;\n      }\n\n      // reflink, nolink\n      if ((cap = this.rules.reflink.exec(src))\n          || (cap = this.rules.nolink.exec(src))) {\n        src = src.substring(cap[0].length);\n        link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n        link = this.links[link.toLowerCase()];\n        if (!link || !link.href) {\n          out += cap[0].charAt(0);\n          src = cap[0].substring(1) + src;\n          continue;\n        }\n        this.inLink = true;\n        out += this.outputLink(cap, link);\n        this.inLink = false;\n        continue;\n      }\n\n      // strong\n      if (cap = this.rules.strong.exec(src)) {\n        src = src.substring(cap[0].length);\n        out += this.renderer.strong(this.output(cap[4] || cap[3] || cap[2] || cap[1]));\n        continue;\n      }\n\n      // em\n      if (cap = this.rules.em.exec(src)) {\n        src = src.substring(cap[0].length);\n        out += this.renderer.em(this.output(cap[6] || cap[5] || cap[4] || cap[3] || cap[2] || cap[1]));\n        continue;\n      }\n\n      // code\n      if (cap = this.rules.code.exec(src)) {\n        src = src.substring(cap[0].length);\n        out += this.renderer.codespan(escape(cap[2].trim(), true));\n        continue;\n      }\n\n      // br\n      if (cap = this.rules.br.exec(src)) {\n        src = src.substring(cap[0].length);\n        out += this.renderer.br();\n        continue;\n      }\n\n      // del (gfm)\n      if (cap = this.rules.del.exec(src)) {\n        src = src.substring(cap[0].length);\n        out += this.renderer.del(this.output(cap[1]));\n        continue;\n      }\n\n      // autolink\n      if (cap = this.rules.autolink.exec(src)) {\n        src = src.substring(cap[0].length);\n        if (cap[2] === '@') {\n          text = escape(this.mangle(cap[1]));\n          href = 'mailto:' + text;\n        } else {\n          text = escape(cap[1]);\n          href = text;\n        }\n        out += this.renderer.link(href, null, text);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.inLink && (cap = this.rules.url.exec(src))) {\n        if (cap[2] === '@') {\n          text = escape(cap[0]);\n          href = 'mailto:' + text;\n        } else {\n          // do extended autolink path validation\n          do {\n            prevCapZero = cap[0];\n            cap[0] = this.rules._backpedal.exec(cap[0])[0];\n          } while (prevCapZero !== cap[0]);\n          text = escape(cap[0]);\n          if (cap[1] === 'www.') {\n            href = 'http://' + text;\n          } else {\n            href = text;\n          }\n        }\n        src = src.substring(cap[0].length);\n        out += this.renderer.link(href, null, text);\n        continue;\n      }\n\n      // text\n      if (cap = this.rules.text.exec(src)) {\n        src = src.substring(cap[0].length);\n        if (this.inRawBlock) {\n          out += this.renderer.text(this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0]);\n        } else {\n          out += this.renderer.text(escape(this.smartypants(cap[0])));\n        }\n        continue;\n      }\n\n      if (src) {\n        throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n      }\n    }\n\n    return out;\n  }\n\n  static escapes(text) {\n    return text ? text.replace(InlineLexer.rules._escapes, '$1') : text;\n  }\n\n  /**\n   * Compile Link\n   */\n  outputLink(cap, link) {\n    const href = link.href,\n      title = link.title ? escape(link.title) : null;\n\n    return cap[0].charAt(0) !== '!'\n      ? this.renderer.link(href, title, this.output(cap[1]))\n      : this.renderer.image(href, title, escape(cap[1]));\n  }\n\n  /**\n   * Smartypants Transformations\n   */\n  smartypants(text) {\n    if (!this.options.smartypants) return text;\n    return text\n      // em-dashes\n      .replace(/---/g, '\\u2014')\n      // en-dashes\n      .replace(/--/g, '\\u2013')\n      // opening singles\n      .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n      // closing singles & apostrophes\n      .replace(/'/g, '\\u2019')\n      // opening doubles\n      .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n      // closing doubles\n      .replace(/\"/g, '\\u201d')\n      // ellipses\n      .replace(/\\.{3}/g, '\\u2026');\n  }\n\n  /**\n   * Mangle Links\n   */\n  mangle(text) {\n    if (!this.options.mangle) return text;\n    const l = text.length;\n    let out = '',\n      i = 0,\n      ch;\n\n    for (; i < l; i++) {\n      ch = text.charCodeAt(i);\n      if (Math.random() > 0.5) {\n        ch = 'x' + ch.toString(16);\n      }\n      out += '&#' + ch + ';';\n    }\n\n    return out;\n  }\n};\n"]}]}