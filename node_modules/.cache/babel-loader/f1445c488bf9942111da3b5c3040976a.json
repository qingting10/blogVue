{"remainingRequest":"D:\\MyProjects\\HbuilderX-projects\\2.19z\\node_modules\\babel-loader\\lib\\index.js!D:\\MyProjects\\HbuilderX-projects\\2.19z\\src\\js\\Renderer.js","dependencies":[{"path":"D:\\MyProjects\\HbuilderX-projects\\2.19z\\src\\js\\Renderer.js","mtime":1584139706000},{"path":"D:\\MyProjects\\HbuilderX-projects\\2.19z\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1582103017138},{"path":"D:\\MyProjects\\HbuilderX-projects\\2.19z\\node_modules\\babel-loader\\lib\\index.js","mtime":1582103090028}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.match\";\nimport _classCallCheck from \"D:\\\\MyProjects\\\\HbuilderX-projects\\\\2.19z\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\MyProjects\\\\HbuilderX-projects\\\\2.19z\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/createClass\";\n\nvar _require = require(\"./defaults.js\"),\n    defaults = _require.defaults;\n\nvar _require2 = require(\"./helpers.js\"),\n    cleanUrl = _require2.cleanUrl,\n    escape = _require2.escape;\n/**\n * Renderer\n */\n\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  function Renderer(options) {\n    _classCallCheck(this, Renderer);\n\n    this.options = options || defaults;\n  }\n\n  _createClass(Renderer, [{\n    key: \"code\",\n    value: function code(_code, infostring, escaped) {\n      var lang = (infostring || '').match(/\\S*/)[0];\n\n      if (this.options.highlight) {\n        var out = this.options.highlight(_code, lang);\n\n        if (out != null && out !== _code) {\n          escaped = true;\n          _code = out;\n        }\n      }\n\n      if (!lang) {\n        return '<pre><code>' + (escaped ? _code : escape(_code, true)) + '</code></pre>';\n      }\n\n      return '<pre><code class=\"' + this.options.langPrefix + escape(lang, true) + '\">' + (escaped ? _code : escape(_code, true)) + '</code></pre>\\n';\n    }\n  }, {\n    key: \"blockquote\",\n    value: function blockquote(quote) {\n      return '<blockquote>\\n' + quote + '</blockquote>\\n';\n    }\n  }, {\n    key: \"html\",\n    value: function html(_html) {\n      return _html;\n    }\n  }, {\n    key: \"heading\",\n    value: function heading(text, level, raw, slugger) {\n      if (this.options.headerIds) {\n        return '<h' + level + ' id=\"' + this.options.headerPrefix + slugger.slug(raw) + '\">' + text + '</h' + level + '>\\n';\n      } // ignore IDs\n\n\n      return '<h' + level + '>' + text + '</h' + level + '>\\n';\n    }\n  }, {\n    key: \"hr\",\n    value: function hr() {\n      return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n    }\n  }, {\n    key: \"list\",\n    value: function list(body, ordered, start) {\n      var type = ordered ? 'ol' : 'ul',\n          startatt = ordered && start !== 1 ? ' start=\"' + start + '\"' : '';\n      return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n    }\n  }, {\n    key: \"listitem\",\n    value: function listitem(text) {\n      return '<li>' + text + '</li>\\n';\n    }\n  }, {\n    key: \"checkbox\",\n    value: function checkbox(checked) {\n      return '<input ' + (checked ? 'checked=\"\" ' : '') + 'disabled=\"\" type=\"checkbox\"' + (this.options.xhtml ? ' /' : '') + '> ';\n    }\n  }, {\n    key: \"paragraph\",\n    value: function paragraph(text) {\n      return '<p>' + text + '</p>\\n';\n    }\n  }, {\n    key: \"table\",\n    value: function table(header, body) {\n      if (body) body = '<tbody>' + body + '</tbody>';\n      return '<table>\\n' + '<thead>\\n' + header + '</thead>\\n' + body + '</table>\\n';\n    }\n  }, {\n    key: \"tablerow\",\n    value: function tablerow(content) {\n      return '<tr>\\n' + content + '</tr>\\n';\n    }\n  }, {\n    key: \"tablecell\",\n    value: function tablecell(content, flags) {\n      var type = flags.header ? 'th' : 'td';\n      var tag = flags.align ? '<' + type + ' align=\"' + flags.align + '\">' : '<' + type + '>';\n      return tag + content + '</' + type + '>\\n';\n    }\n  }, {\n    key: \"strong\",\n    // span level renderer\n    value: function strong(text) {\n      return '<strong>' + text + '</strong>';\n    }\n  }, {\n    key: \"em\",\n    value: function em(text) {\n      return '<em>' + text + '</em>';\n    }\n  }, {\n    key: \"codespan\",\n    value: function codespan(text) {\n      return '<code>' + text + '</code>';\n    }\n  }, {\n    key: \"br\",\n    value: function br() {\n      return this.options.xhtml ? '<br/>' : '<br>';\n    }\n  }, {\n    key: \"del\",\n    value: function del(text) {\n      return '<del>' + text + '</del>';\n    }\n  }, {\n    key: \"link\",\n    value: function link(href, title, text) {\n      href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n\n      if (href === null) {\n        return text;\n      }\n\n      var out = '<a href=\"' + escape(href) + '\"';\n\n      if (title) {\n        out += ' title=\"' + title + '\"';\n      }\n\n      out += '>' + text + '</a>';\n      return out;\n    }\n  }, {\n    key: \"image\",\n    value: function image(href, title, text) {\n      href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n\n      if (href === null) {\n        return text;\n      }\n\n      var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n\n      if (title) {\n        out += ' title=\"' + title + '\"';\n      }\n\n      out += this.options.xhtml ? '/>' : '>';\n      return out;\n    }\n  }, {\n    key: \"text\",\n    value: function text(_text) {\n      return _text;\n    }\n  }]);\n\n  return Renderer;\n}();",{"version":3,"sources":["D:\\MyProjects\\HbuilderX-projects\\2.19z\\src\\js\\Renderer.js"],"names":["require","defaults","cleanUrl","escape","module","exports","options","code","infostring","escaped","lang","match","highlight","out","langPrefix","quote","html","text","level","raw","slugger","headerIds","headerPrefix","slug","xhtml","body","ordered","start","type","startatt","checked","header","content","flags","tag","align","href","title","sanitize","baseUrl"],"mappings":"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","sourcesContent":["const { defaults } = require('./defaults.js');\nconst {\n  cleanUrl,\n  escape\n} = require('./helpers.js');\n\n/**\n * Renderer\n */\nmodule.exports = class Renderer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/\\S*/)[0];\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    if (!lang) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>';\n    }\n\n    return '<pre><code class=\"'\n      + this.options.langPrefix\n      + escape(lang, true)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n';\n  };\n\n  blockquote(quote) {\n    return '<blockquote>\\n' + quote + '</blockquote>\\n';\n  };\n\n  html(html) {\n    return html;\n  };\n\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      return '<h'\n        + level\n        + ' id=\"'\n        + this.options.headerPrefix\n        + slugger.slug(raw)\n        + '\">'\n        + text\n        + '</h'\n        + level\n        + '>\\n';\n    }\n    // ignore IDs\n    return '<h' + level + '>' + text + '</h' + level + '>\\n';\n  };\n\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  };\n\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  };\n\n  listitem(text) {\n    return '<li>' + text + '</li>\\n';\n  };\n\n  checkbox(checked) {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\"'\n      + (this.options.xhtml ? ' /' : '')\n      + '> ';\n  };\n\n  paragraph(text) {\n    return '<p>' + text + '</p>\\n';\n  };\n\n  table(header, body) {\n    if (body) body = '<tbody>' + body + '</tbody>';\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  };\n\n  tablerow(content) {\n    return '<tr>\\n' + content + '</tr>\\n';\n  };\n\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align\n      ? '<' + type + ' align=\"' + flags.align + '\">'\n      : '<' + type + '>';\n    return tag + content + '</' + type + '>\\n';\n  };\n\n  // span level renderer\n  strong(text) {\n    return '<strong>' + text + '</strong>';\n  };\n\n  em(text) {\n    return '<em>' + text + '</em>';\n  };\n\n  codespan(text) {\n    return '<code>' + text + '</code>';\n  };\n\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  };\n\n  del(text) {\n    return '<del>' + text + '</del>';\n  };\n\n  link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    let out = '<a href=\"' + escape(href) + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  };\n\n  image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n\n    let out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  };\n\n  text(text) {\n    return text;\n  };\n};\n"]}]}