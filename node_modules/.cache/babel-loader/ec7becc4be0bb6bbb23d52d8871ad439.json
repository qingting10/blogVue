{"remainingRequest":"D:\\MyProjects\\HbuilderX-projects\\2.19z\\node_modules\\babel-loader\\lib\\index.js!D:\\MyProjects\\HbuilderX-projects\\2.19z\\src\\main.js","dependencies":[{"path":"D:\\MyProjects\\HbuilderX-projects\\2.19z\\src\\main.js","mtime":1590286046647},{"path":"D:\\MyProjects\\HbuilderX-projects\\2.19z\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1582103017138},{"path":"D:\\MyProjects\\HbuilderX-projects\\2.19z\\node_modules\\babel-loader\\lib\\index.js","mtime":1582103090028}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"D:\\\\MyProjects\\\\HbuilderX-projects\\\\2.19z\\\\node_modules\\\\core-js\\\\modules\\\\es6.array.iterator.js\";\nimport \"D:\\\\MyProjects\\\\HbuilderX-projects\\\\2.19z\\\\node_modules\\\\core-js\\\\modules\\\\es6.promise.js\";\nimport \"D:\\\\MyProjects\\\\HbuilderX-projects\\\\2.19z\\\\node_modules\\\\core-js\\\\modules\\\\es6.object.assign.js\";\nimport \"D:\\\\MyProjects\\\\HbuilderX-projects\\\\2.19z\\\\node_modules\\\\core-js\\\\modules\\\\es7.promise.finally.js\";\nimport Vue from 'vue';\nimport App from \"./App.vue\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport $ from 'jquery';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/js/bootstrap.min.js\";\nimport \"bootstrap\"; //引入自定义的导航栏标签\n\nimport \"./css/nav.css\";\nimport mavonEditor from 'mavon-editor'; //markdown编辑器\n\nimport 'mavon-editor/dist/css/index.css';\nVue.use(mavonEditor);\nimport axios from 'axios';\nimport VueAxios from 'vue-axios';\nimport qs from 'qs';\nVue.prototype.$ajax = axios;\nVue.prototype.$qs = qs;\nVue.use(VueResource);\nimport VueResource from 'vue-resource';\nimport router from \"./router\"; //引入路由\n\nimport api from \"./js/api\";\nwindow.Vue = Vue;\nVue.config.productionTip = false; // 通过路由进行拦截\n\nrouter.beforeEach(function (to, from, next) {\n  if (to.meta.requireAuth) {\n    // 判断该路由是否需要登录权限\n    if (localStorage.getItem(\"login\")) {\n      // 通过localStorage获取当前的token是否存在 \n      next();\n    } else {\n      next({\n        path: \"/login\",\n        query: {\n          redirect: to.fullPath // 将跳转的路由path作为参数，登录成功后跳转到该路由\n\n        }\n      });\n    }\n  } else {\n    next();\n  }\n}); // 通过请求进行拦截\n\naxios.interceptors.request.use(function (config) {\n  if (!localStorage.getItem(\"login\")) {\n    // 判断是否存在token，如果存在的话，则每个http header都加上token\n    // config.headers.Authorization = `token ${store.state.token}`;\n    // 设置请求拦截,直接跳转路由到登录页面\n    //api 为数组,里面存放可以未登录访问的接口,比如登陆注册接口等\n    // 遍历数组\n    var isApi = 0;\n    api.map(function (items) {\n      // 对数组的每一个内容进行判断,如果接口地址属于未登录可访问接口,直接结束拦截\n      if (items === config.url) {\n        isApi = 1;\n        return;\n      }\n    });\n\n    if (isApi) {\n      // console.log(isApi)\n      return config;\n    } // 若没有通过判断且不属于可未登录就访问的接口,将接口拦截.不再发送请求\n    // console.log(\"================走不走===========\");\n\n\n    router.replace({\n      path: \"/\" // path: \"/login\",\n      // query: { redirect: router.currentRoute.fullPath }\n\n    }); // console.log(\"==============config==========\");\n    // console.log(config);\n\n    return Promise.reject(err);\n  }\n\n  return config;\n}, function (err) {\n  return Promise.reject(err);\n}); // http response 响应拦截器\n\naxios.interceptors.response.use(function (response) {\n  // 这边是成功的返回,可以在这里做事情,每个接口成功返回参数都会到这里\n  console.log(response);\n  return response;\n}, function (error) {\n  // 通过不同返回的状态码去做不同的事情,一般500是参数错误,400是参数名错误\n  if (error.response) {\n    console.log(error.response);\n\n    switch (error.response.status) {\n      // case 401:\n      //   // 返回 401 清除token信息并跳转到登录页面\n      //   router.replace({\n      //     path: \"login\",\n      //     query: { redirect: router.currentRoute.fullPath }\n      //   });\n      case 500:\n        alert(\"参数传递错误\");\n      // 不要这个提示的话就把他删了\n    }\n  }\n\n  return Promise.reject(error.response.data); // 返回接口返回的错误信息\n});\nnew Vue({\n  router: router,\n  $: $,\n  render: function render(h) {\n    return h(App);\n  }\n}).$mount('#app');",{"version":3,"sources":["D:\\MyProjects\\HbuilderX-projects\\2.19z\\src\\main.js"],"names":["Vue","App","$","mavonEditor","use","axios","VueAxios","qs","prototype","$ajax","$qs","VueResource","router","api","window","config","productionTip","beforeEach","to","from","next","meta","requireAuth","localStorage","getItem","path","query","redirect","fullPath","interceptors","request","isApi","map","items","url","replace","Promise","reject","err","response","console","log","error","status","alert","data","render","h","$mount"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport App from './App.vue'\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport $ from 'jquery';\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"bootstrap/dist/js/bootstrap.min.js\";\r\nimport \"bootstrap\" ;\r\n\r\n//引入自定义的导航栏标签\r\nimport \"./css/nav.css\";\r\n\r\nimport mavonEditor from 'mavon-editor';     //markdown编辑器\nimport 'mavon-editor/dist/css/index.css';\nVue.use(mavonEditor);\r\n\r\nimport axios from 'axios'\r\nimport VueAxios from 'vue-axios'\r\nimport qs from 'qs';\r\nVue.prototype.$ajax = axios;\r\nVue.prototype.$qs = qs;\nVue.use(VueResource);\r\n\r\nimport VueResource from 'vue-resource'\r\nimport router from './router'\t//引入路由\r\n\r\nimport api from \"./js/api\";\r\n\r\nwindow.Vue=Vue;\n\nVue.config.productionTip = false\r\n\r\n\r\n// 通过路由进行拦截\r\nrouter.beforeEach((to, from, next) => {\r\n\tif (to.meta.requireAuth) {\r\n\t\t// 判断该路由是否需要登录权限\r\n\t\tif (localStorage.getItem(\"login\")) {\r\n\t\t\t// 通过localStorage获取当前的token是否存在 \r\n\t\t\tnext();\r\n\t\t} else {\r\n\t\t\tnext({\r\n\t\t\t\tpath: \"/login\",\r\n\t\t\t\tquery: { redirect: to.fullPath } // 将跳转的路由path作为参数，登录成功后跳转到该路由\r\n\t\t\t});\r\n\t\t}\r\n\t} \r\n\telse {\r\n\t\tnext();\r\n\t}\r\n});\r\n\r\n// 通过请求进行拦截\r\naxios.interceptors.request.use(\r\n    config => {\r\n\t\tif (!localStorage.getItem(\"login\")) {\r\n\t\t\t// 判断是否存在token，如果存在的话，则每个http header都加上token\r\n\t\t\t// config.headers.Authorization = `token ${store.state.token}`;\r\n\t\t\t// 设置请求拦截,直接跳转路由到登录页面\r\n\t\t\t//api 为数组,里面存放可以未登录访问的接口,比如登陆注册接口等\r\n\t\t\t// 遍历数组\r\n\t\t\tvar isApi = 0;\r\n\t\t\tapi.map(items => {\r\n\t\t\t\t// 对数组的每一个内容进行判断,如果接口地址属于未登录可访问接口,直接结束拦截\r\n\t\t\t\tif (items === config.url) {\r\n\t\t\t\t\tisApi=1;\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tif(isApi){\r\n\t\t\t\t// console.log(isApi)\r\n\t\t\t\treturn config;\r\n\t\t\t}\r\n\t\t\t// 若没有通过判断且不属于可未登录就访问的接口,将接口拦截.不再发送请求\r\n\t\t\t// console.log(\"================走不走===========\");\r\n\t\t\trouter.replace({\r\n\t\t\t\tpath: \"/\",\r\n\t\t\t\t// path: \"/login\",\r\n\t\t\t\t// query: { redirect: router.currentRoute.fullPath }\r\n\t\t\t});\r\n\t\t\t// console.log(\"==============config==========\");\r\n\t\t\t// console.log(config);\r\n\t\t\treturn Promise.reject(err);\r\n\t\t}\r\n\t\t\r\n\t\treturn config;\r\n\t},\r\n\terr => {\r\n\t\treturn Promise.reject(err);\r\n\t}\r\n);\r\n\r\n// http response 响应拦截器\r\naxios.interceptors.response.use(\r\n\tresponse => {\r\n\t\t// 这边是成功的返回,可以在这里做事情,每个接口成功返回参数都会到这里\r\n\t\tconsole.log(response);\r\n\t\treturn response;\r\n\t},\r\n\terror => {\r\n      // 通过不同返回的状态码去做不同的事情,一般500是参数错误,400是参数名错误\r\n\t\tif (error.response) {\r\n\t\t\tconsole.log(error.response);\r\n\t\t\tswitch (error.response.status) {\r\n\t\t\t\t// case 401:\r\n\t\t\t\t//   // 返回 401 清除token信息并跳转到登录页面\r\n\t\t\t\t//   router.replace({\r\n\t\t\t\t//     path: \"login\",\r\n\t\t\t\t//     query: { redirect: router.currentRoute.fullPath }\r\n\t\t\t\t//   });\r\n\t\t\t\tcase 500:alert(\"参数传递错误\") // 不要这个提示的话就把他删了\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn Promise.reject(error.response.data); // 返回接口返回的错误信息\r\n\t}\r\n);\r\n\nnew Vue({\r\n\trouter,\r\n\t$,\n    render: h => h(App),\r\n\t\n}).$mount('#app')\n"]}]}